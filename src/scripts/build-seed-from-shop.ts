import { writeFile } from "node:fs/promises";
import { resolve } from "node:path";

import type {
  Area,
  Capacity,
  HouseId,
  HouseInfo,
  PricingConfig,
} from "../lib/nah-the-key.types";

// unused temp type removed

const ORIGIN = "https://notahotel.com";

async function fetchText(url: string): Promise<string> {
  const res = await fetch(url, {
    headers: {
      "User-Agent": "Mozilla/5.0 (seed-bot)",
      Accept: "text/html,application/xhtml+xml,application/xml",
    },
  });
  if (!res.ok)
    throw new Error(`HTTP ${res.status} ${res.statusText} for ${url}`);
  return await res.text();
}

function extractShopLinks(html: string): string[] {
  const set = new Set<string>();
  const re = /href\s*=\s*"(\/shop\/[^"#?]+)"/gi;
  for (const m of html.matchAll(re)) {
    set.add(m[1]);
  }
  return Array.from(set);
}

// unused helper removed

function toAbs(url: string): string {
  if (url.startsWith("http")) return url;
  return ORIGIN + url;
}

function extractBaselinePriceJpy(html: string): number | undefined {
  // Try to find patterns like: ¥180,000~/1 night or ￥450,000~/1 night
  const re = /[¥￥]\s*([0-9]{1,3}(?:,[0-9]{3})+|[0-9]+)\s*~\s*\/?\s*1\s*night/i;
  const m = html.match(re);
  if (!m) return undefined;
  const num = Number(m[1].replace(/,/g, ""));
  return Number.isFinite(num) ? num : undefined;
}

function extractOgImage(html: string): string | undefined {
  const m =
    html.match(
      /<meta[^>]+property=["']og:image["'][^>]+content=["']([^"']+)["']/i,
    ) ||
    html.match(
      /<meta[^>]+name=["']twitter:image["'][^>]+content=["']([^"']+)["']/i,
    );
  return m?.[1];
}

// Known capacity defaults for our target houses
const CAPACITY: Record<HouseId, Capacity> = {
  "+DESK_FUKUOKA": { standard: 4, max: 8, coSleepingMax: 2 },
  "+CHEF_FUKUOKA": { standard: 4, max: 8, coSleepingMax: 2 },
  "+ATELIER_FUKUOKA": { standard: 4, max: 8, coSleepingMax: 2 },
  BASE_S_KITA_KARUIZAWA: { standard: 2, max: 2, coSleepingMax: 2 },
  AOSHIMA_EXCLUSIVE: { standard: 4, max: 8, coSleepingMax: 2 },
};

const HOUSE_NAME: Record<HouseId, string> = {
  "+DESK_FUKUOKA": "+DESK FUKUOKA",
  "+CHEF_FUKUOKA": "+CHEF FUKUOKA",
  "+ATELIER_FUKUOKA": "+ATELIER FUKUOKA",
  BASE_S_KITA_KARUIZAWA: "BASE S 北軽井沢",
  AOSHIMA_EXCLUSIVE: "AOSHIMA MASTERPIECE（EXCLUSIVE相当）",
};

async function main() {
  // 1) Crawl /shop and collect links
  const shopHtml = await fetchText(`${ORIGIN}/shop`);
  const links = extractShopLinks(shopHtml);

  // 2) Select URLs we need
  const mapping: Partial<Record<HouseId, string>> = {};
  for (const href of links) {
    if (href.includes("/fukuoka/desk")) mapping["+DESK_FUKUOKA"] = toAbs(href);
    if (href.includes("/fukuoka/chef")) mapping["+CHEF_FUKUOKA"] = toAbs(href);
    if (href.includes("/fukuoka/atelier"))
      mapping["+ATELIER_FUKUOKA"] = toAbs(href);
    if (href.includes("/kitakaruizawa/base-s"))
      mapping.BASE_S_KITA_KARUIZAWA = toAbs(href);
    if (href.includes("/aoshima/")) mapping.AOSHIMA_EXCLUSIVE = toAbs(href);
  }
  // Fallback for AOSHIMA if not listed under /shop
  if (!mapping.AOSHIMA_EXCLUSIVE) {
    mapping.AOSHIMA_EXCLUSIVE = `${ORIGIN}/en/properties/aoshima-masterpiece`;
  }

  // 3) Fetch each page to extract OG and baseline
  const infos: Partial<Record<HouseId, HouseInfo>> = {};
  for (const [hid, url] of Object.entries(mapping) as Array<
    [HouseId, string]
  >) {
    const html = await fetchText(url);
    const og = extractOgImage(html);
    const baseline = extractBaselinePriceJpy(html);
    let area: Area = "FUKUOKA";
    if (url.includes("kitakaruizawa")) area = "KITA_KARUIZAWA";
    if (url.includes("aoshima")) area = "AOSHIMA";

    infos[hid] = {
      id: hid,
      displayName: HOUSE_NAME[hid],
      area,
      capacity: CAPACITY[hid],
      baselinePerNightJpy:
        baseline ??
        (hid === "AOSHIMA_EXCLUSIVE"
          ? 450_000
          : hid === "BASE_S_KITA_KARUIZAWA"
            ? 120_000
            : 180_000),
      officialUrl: url,
      officialThumbUrl: og,
    };
  }

  // 4) Compose seed file content
  const houseTableTs =
    `// This file is generated by src/scripts/build-seed-from-shop.ts\n` +
    `import type { Area, HouseId, HouseInfo, PricingConfig } from "./nah-the-key.types";\n\n` +
    `export const HOUSE_TABLE: Record<HouseId, HouseInfo> = ${JSON.stringify(
      infos,
      null,
      2,
    )}\n as unknown as Record<HouseId, HouseInfo>;\n\n` +
    `export const DEFAULT_PRICING_CONFIG: PricingConfig = ${JSON.stringify(
      defaultPricingConfig(),
      null,
      2,
    )} as PricingConfig;\n\n` +
    resolveHelpersTs();

  const outPath = resolve(process.cwd(), "src/lib/nah-the-key.seed.ts");
  await writeFile(outPath, houseTableTs, "utf8");
  console.error(`[generated] ${outPath}`);
}

function defaultPricingConfig(): PricingConfig {
  return {
    ethJpy: 660000,
    monthFactor: {
      FUKUOKA: {
        "1": 0.9,
        "2": 0.9,
        "3": 1.0,
        "4": 1.05,
        "5": 1.1,
        "6": 1.0,
        "7": 1.05,
        "8": 1.05,
        "9": 1.05,
        "10": 1.1,
        "11": 1.0,
        "12": 0.95,
      },
      KITA_KARUIZAWA: {
        "1": 1.0,
        "2": 1.0,
        "3": 0.95,
        "4": 1.0,
        "5": 1.05,
        "6": 1.0,
        "7": 1.3,
        "8": 1.3,
        "9": 1.1,
        "10": 1.2,
        "11": 0.95,
        "12": 0.95,
      },
      AOSHIMA: {
        "1": 1.0,
        "2": 1.0,
        "3": 1.0,
        "4": 1.05,
        "5": 1.1,
        "6": 1.1,
        "7": 1.2,
        "8": 1.2,
        "9": 1.1,
        "10": 1.1,
        "11": 1.0,
        "12": 1.0,
      },
    },
    dowFactor: {
      Mon: 0.9,
      Tue: 0.9,
      Wed: 0.95,
      Thu: 1.0,
      Fri: 1.15,
      Sat: 1.25,
      Sun: 1.05,
    },
    longStayFactor: { "1": 1.0, "2": 0.95, "3": 0.9 },
    leadtimeFactor: [
      { days_lt: 7, factor: 0.8 },
      { days_lt: 14, factor: 0.9 },
      { days_lt: 30, factor: 0.95 },
      { days_lt: 365, factor: 1.0 },
    ],
  };
}

function resolveHelpersTs(): string {
  return (
    `// ===== helper: 公式ページからOG画像を解決 =====\n` +
    `export async function resolveOgImage(url: string): Promise<string | undefined> {\n` +
    `  const res = await fetch(url, {\n` +
    `    headers: { 'User-Agent': 'Mozilla/5.0 (+https://github.com/whatwg/fetch)' },\n` +
    `  });\n` +
    `  const html = await res.text();\n` +
    `  const m =\n` +
    `    html.match(/<meta[^>]+property=["']og:image["'][^>]+content=["']([^"]+)["']/i) ||\n` +
    `    html.match(/<meta[^>]+name=["']twitter:image["'][^>]+content=["']([^"]+)["']/i);\n` +
    `  return m?.[1];\n` +
    `}\n\n` +
    `/** サムネ未設定の項目にOG画像URLを流し込む */\n` +
    `export async function hydrateThumbnails(\n` +
    `  table: Record<HouseId, HouseInfo> = HOUSE_TABLE,\n` +
    `) {\n` +
    `  const ids = Object.keys(table) as HouseId[];\n` +
    `  for (const id of ids) {\n` +
    `    const item = table[id];\n` +
    `    if (!item.officialThumbUrl) {\n` +
    `      try {\n` +
    `        const og = await resolveOgImage(item.officialUrl);\n` +
    `        if (og) item.officialThumbUrl = og;\n` +
    `      } catch {\n` +
    `        // ignore\n` +
    `      }\n` +
    `    }\n` +
    `  }\n` +
    `  return table;\n` +
    `}\n`
  );
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
